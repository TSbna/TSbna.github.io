#!/usr/bin/env python3
import requests
import json
import os
from datetime import datetime
import sys
import time

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è
TELEGRAM_BOT_TOKEN = os.getenv('TELEGRAM_BOT_TOKEN')
TELEGRAM_CHAT_ID = os.getenv('TELEGRAM_CHAT_ID')

# –ì–ª–æ–±–∞–ª—å–Ω—ã–π –∫—ç—à –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è —á–∞—Å—Ç—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤
_REQUEST_CACHE = {}
_CACHE_TIMEOUT = 300  # 5 –º–∏–Ω—É—Ç

def load_portfolio():
    """–ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ—Ä—Ç—Ñ–µ–ª—è –∏–∑ —Ñ–∞–π–ª–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    try:
        with open('portfolio.json', 'r', encoding='utf-8') as f:
            portfolio_data = json.load(f)
            
        # –í–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–æ—Ä—Ç—Ñ–µ–ª—è
        if not isinstance(portfolio_data, dict):
            raise ValueError("Portfolio must be a dictionary")
            
        # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        validated_portfolio = {}
        for symbol, lots in portfolio_data.items():
            if isinstance(symbol, str) and isinstance(lots, (int, float)) and lots > 0:
                validated_portfolio[symbol] = int(lots)
                
        return validated_portfolio if validated_portfolio else {"SBER": 10, "GAZP": 5, "VTBR": 1000, "SPBE": 2}
        
    except (FileNotFoundError, json.JSONDecodeError, ValueError) as e:
        print(f"Warning: Error loading portfolio: {e}. Using default portfolio.")
        return {"SBER": 10, "GAZP": 5, "VTBR": 1000, "SPBE": 2}
    except Exception as e:
        print(f"Critical error loading portfolio: {e}")
        return {"SBER": 10, "GAZP": 5, "VTBR": 1000, "SPBE": 2}

def get_moex_data(symbol):
    """–ü–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö —Å –ú–æ—Å–ë–∏—Ä–∂–∏ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º –∏ retry –ª–æ–≥–∏–∫–æ–π"""
    cache_key = f"moex_{symbol}"
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫—ç—à–∞
    if cache_key in _REQUEST_CACHE:
        cached_data, timestamp = _REQUEST_CACHE[cache_key]
        if current_time - timestamp < _CACHE_TIMEOUT:
            return cached_data
    
    try:
        url = f"https://iss.moex.com/iss/engines/stock/markets/shares/boards/TQBR/securities/{symbol}.json"
        params = {
            'iss.meta': 'off',
            'securities.columns': 'SECID,PREVADMITTEDQUOTE,LOTSIZE',
            'marketdata.columns': 'LAST,OPEN,LOW,HIGH,VALUE'
        }
        
        # Retry –ª–æ–≥–∏–∫–∞
        for attempt in range(3):
            try:
                response = requests.get(url, params=params, timeout=10)
                response.raise_for_status()
                data = response.json()
                break
            except requests.exceptions.Timeout:
                if attempt == 2:
                    raise
                time.sleep(1)
            except requests.exceptions.RequestException as e:
                if attempt == 2:
                    raise
                time.sleep(1)
        
        securities = data.get('securities', {}).get('data', [])
        marketdata = data.get('marketdata', {}).get('data', [])
        
        if not securities:
            return None
            
        price = marketdata[0][0] if marketdata and marketdata[0][0] is not None else securities[0][1]
        lot_size = securities[0][2] if len(securities[0]) > 2 and securities[0][2] else 1
        
        if not isinstance(price, (int, float)) or price <= 0:
            return None
            
        result = {
            'price': float(price),
            'lot_size': int(lot_size),
            'source': 'MOEX',
            'timestamp': datetime.now().isoformat()
        }
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –≤ –∫—ç—à
        _REQUEST_CACHE[cache_key] = (result, current_time)
        return result
        
    except Exception as e:
        print(f"Error fetching {symbol}: {e}")
        return None

def generate_report():
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Ç–æ—Ä–≥–æ–≤–æ–≥–æ –æ—Ç—á–µ—Ç–∞ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    portfolio = load_portfolio()
    market_data = {}
    
    print(f"Processing portfolio with {len(portfolio)} symbols: {list(portfolio.keys())}")
    
    # –°–±–æ—Ä –¥–∞–Ω–Ω—ã—Ö –ø–æ –∞–∫—Ç–∏–≤–∞–º —Å –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ–º –ø–∞—Ä–∞–ª–ª–µ–ª–∏–∑–º–∞
    for symbol in portfolio.keys():
        data = get_moex_data(symbol)
        if data:
            market_data[symbol] = data
        time.sleep(0.1)  # Rate limiting
    
    # –†–∞—Å—á–µ—Ç —Å—Ç–æ–∏–º–æ—Å—Ç–∏ –ø–æ—Ä—Ç—Ñ–µ–ª—è
    total_value = 0
    positions = {}
    
    for symbol, lots in portfolio.items():
        data = market_data.get(symbol, {})
        if data and data.get('price'):
            price = data['price']
            lot_size = data.get('lot_size', 1)
            position_value = price * lots * lot_size
            
            positions[symbol] = {
                'lots': lots,
                'price': price,
                'lot_size': lot_size,
                'position_value': position_value
            }
            total_value += position_value
    
    # –§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—Ç—á–µ—Ç–∞
    timestamp = datetime.now().strftime('%Y-%m-%d %H:%M:%S')
    
    report = "ü§ñ –ê–í–¢–û–û–¢–ß–ï–¢ –î–õ–Ø AI-–ê–ù–ê–õ–ò–¢–ò–ö–ê\n"
    report += "=" * 50 + "\n"
    report += f"–í—Ä–µ–º—è: {timestamp}\n\n"
    
    report += "üìä –ü–û–†–¢–§–ï–õ–¨:\n"
    report += "-" * 30 + "\n"
    for symbol, lots in portfolio.items():
        report += f"{symbol}: {lots} –ª–æ—Ç–æ–≤\n"
    
    report += "\nüí∞ –°–¢–û–ò–ú–û–°–¢–¨:\n"
    report += "-" * 30 + "\n"
    for symbol, position in positions.items():
        value = position['position_value']
        percent = (value / total_value * 100) if total_value > 0 else 0
        report += f"{symbol}: {value:,.0f} RUB ({percent:.1f}%)\n"
    
    report += f"\n–í–°–ï–ì–û: {total_value:,.0f} RUB\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ–±–ª–µ–º–Ω—ã—Ö –∞–∫—Ç–∏–≤–∞—Ö
    failed_symbols = [s for s in portfolio.keys() if s not in positions]
    if failed_symbols:
        report += "‚ö†Ô∏è –ü–†–û–ë–õ–ï–ú–ù–´–ï –ê–ö–¢–ò–í–´ (–¥–∞–Ω–Ω—ã–µ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã):\n"
        for symbol in failed_symbols:
            report += f"{symbol}: {portfolio[symbol]} –ª–æ—Ç–æ–≤\n"
        report += "\n"
    
    report += "üéØ –û—Ç–ø—Ä–∞–≤—å—Ç–µ —ç—Ç–æ—Ç –æ—Ç—á–µ—Ç AI-–∞–Ω–∞–ª–∏—Ç–∏–∫—É –¥–ª—è —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
    report += "=" * 50
    
    return report

def send_telegram_message(message):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ Telegram —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    if not TELEGRAM_BOT_TOKEN or not TELEGRAM_CHAT_ID:
        print("Telegram credentials not set")
        return False
    
    # –û–±—Ä–µ–∑–∫–∞ –¥–ª–∏–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è Telegram
    if len(message) > 4000:
        message = message[:4000] + "\n... [—Å–æ–æ–±—â–µ–Ω–∏–µ –æ–±—Ä–µ–∑–∞–Ω–æ]"
    
    url = f"https://api.telegram.org/bot{TELEGRAM_BOT_TOKEN}/sendMessage"
    payload = {
        'chat_id': TELEGRAM_CHAT_ID,
        'text': message,
        'parse_mode': 'HTML'
    }
    
    try:
        response = requests.post(url, json=payload, timeout=15)
        if response.status_code != 200:
            print(f"Telegram API error: {response.status_code} - {response.text}")
            return False
        return True
    except Exception as e:
        print(f"Error sending Telegram message: {e}")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
    print("ü§ñ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ—Ç—á–µ—Ç–∞...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º –ø–∞–ø–∫—É –¥–ª—è –æ—Ç—á–µ—Ç–æ–≤
        os.makedirs('reports', exist_ok=True)
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –æ—Ç—á–µ—Ç
        report = generate_report()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        timestamp = datetime.now().strftime('%Y%m%d_%H%M')
        filename = f'reports/auto_report_{timestamp}.txt'
        
        with open(filename, 'w', encoding='utf-8') as f:
            f.write(report)
        
        print(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω: {filename}")
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤ Telegram
        if send_telegram_message(f"<pre>{report}</pre>"):
            print("‚úÖ –û—Ç—á–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ Telegram")
        else:
            print("‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ Telegram")
            
    except Exception as e:
        print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ main: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()